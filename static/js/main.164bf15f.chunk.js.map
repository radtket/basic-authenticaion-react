{"version":3,"sources":["hooks/useAuthState.js","App/AuthenticatedApp/components/Header.js","App/AuthenticatedApp/components/Footer.js","App/AuthenticatedApp/components/Content.js","App/AuthenticatedApp/index.js","App/UnauthenticatedApp.js","App/index.js","serviceWorker.js","index.js"],"names":["getUser","sleep","time","Promise","resolve","setTimeout","then","username","AuthContext","createContext","Data","_ref","status","error","children","React","createElement","message","useAuthState","state","useContext","isPending","isError","isSuccess","isAuthenticated","user","_objectSpread","AuthProvider","_ref2","setState","useState","useEffect","Provider","value","Header","Footer","Content","AuthenticatedApp","Fragment","UnauthenticatedApp","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sOAEA,MAEMA,EAAUA,KAAMC,OAFRC,EAEc,IAFN,IAAIC,QAAQC,GAAWC,WAAWD,EAASF,KAE/BI,KAAK,MAASC,SAAU,UAF5CL,OAKDM,EAAcC,0BAErBC,EAAOC,IAAkC,IAAjC,OAAEC,EAAM,MAAEC,EAAK,SAAEC,GAAUH,EACvC,MAAe,YAAXC,EACKG,IAAAC,cAAA,UAAI,WAGE,UAAXJ,EAEAG,IAAAC,cAAA,WAAK,QAEHD,IAAAC,cAAA,WACED,IAAAC,cAAA,WAAMH,EAAMI,WAMbH,GAGII,EAAeA,KAC1B,MAAMC,EAAQC,qBAAWZ,GACnBa,EAA6B,YAAjBF,EAAMP,OAClBU,EAA2B,UAAjBH,EAAMP,OAChBW,EAA6B,YAAjBJ,EAAMP,OAClBY,EAAkBL,EAAMM,MAAQF,EAEtC,OAAAG,wBAAA,GACKP,GAAK,IACRE,YACAC,UACAC,YACAC,qBAISG,EAAeC,IAAmB,IAAlB,SAAEd,GAAUc,EACvC,MAAOT,EAAOU,GAAYC,mBAAS,CACjClB,OAAQ,UACRC,MAAO,KACPY,KAAM,OAUR,OAPAM,oBAAU,KACR/B,IAAUM,KACRmB,GAAQI,EAAS,CAAEjB,OAAQ,UAAWC,MAAO,KAAMY,SACnDZ,GAASgB,EAAS,CAAEjB,OAAQ,QAASC,QAAOY,KAAM,SAEnD,IAGDV,IAAAC,cAACR,EAAYwB,SAAQ,CAACC,MAAOd,GAC3BJ,IAAAC,cAACN,EAAIgB,wBAAA,GAAUP,GAAK,IAAEL,gBCpDboB,MALAA,KACb,MAAM,KAAET,GAASP,IACjB,OAAOH,IAAAC,cAAA,SAAG,SAAOS,EAAKlB,WCDT4B,MAFAA,IAAMpB,IAAAC,cAAA,SAAG,2BCMToB,MALCA,KACd,MAAM,KAAEX,GAASP,IACjB,OAAOH,IAAAC,cAAA,SAAG,kCAAgCS,EAAKlB,SAAS,MCQ3C8B,MARUA,IACvBtB,IAAAC,cAAAD,IAAAuB,SAAA,KACEvB,IAAAC,cAACkB,EAAM,MACPnB,IAAAC,cAACoB,EAAO,MACRrB,IAAAC,cAACmB,EAAM,OCAII,MAPYA,IACzBxB,IAAAC,cAAAD,IAAAuB,SAAA,KACEvB,IAAAC,cAAA,SAAG,gBACHD,IAAAC,cAAA,SAAG,uCCKQwB,MALHA,KACV,MAAM,KAAEf,GAASP,IACjB,OAAOO,EAAOV,IAAAC,cAACqB,EAAgB,MAAMtB,IAAAC,cAACuB,EAAkB,OCKtCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPhC,IAAAC,cAACW,EAAY,KACXZ,IAAAC,cAACwB,EAAG,OAENQ,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK+C,IACjCA,EAAaC,iB","file":"static/js/main.164bf15f.chunk.js","sourcesContent":["import React, { useContext, useState, useEffect, createContext } from 'react';\n\nconst sleep = time => new Promise(resolve => setTimeout(resolve, time));\n\nconst getUser = () => sleep(1000).then(() => ({ username: 'elmo' }));\n// .then(() => null)\n\nexport const AuthContext = createContext();\n\nconst Data = ({ status, error, children }) => {\n  if (status === 'pending') {\n    return <h1>Loading</h1>;\n  }\n\n  if (status === 'error') {\n    return (\n      <div>\n        Oh no\n        <div>\n          <pre>{error.message}</pre>\n        </div>\n      </div>\n    );\n  }\n\n  return children;\n};\n\nexport const useAuthState = () => {\n  const state = useContext(AuthContext);\n  const isPending = state.status === 'pending';\n  const isError = state.status === 'error';\n  const isSuccess = state.status === 'success';\n  const isAuthenticated = state.user && isSuccess;\n\n  return {\n    ...state,\n    isPending,\n    isError,\n    isSuccess,\n    isAuthenticated,\n  };\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [state, setState] = useState({\n    status: 'pending',\n    error: null,\n    user: null,\n  });\n\n  useEffect(() => {\n    getUser().then(\n      user => setState({ status: 'success', error: null, user }),\n      error => setState({ status: 'error', error, user: null })\n    );\n  }, []);\n\n  return (\n    <AuthContext.Provider value={state}>\n      <Data {...{ ...state, children }} />\n    </AuthContext.Provider>\n  );\n};\n","import React from 'react';\nimport { useAuthState } from '../../../hooks/useAuthState';\n\nconst Header = () => {\n  const { user } = useAuthState();\n  return <p>Hello {user.username}</p>;\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = () => <p>This is an awesome app!</p>;\n\nexport default Footer;\n","import React from 'react';\nimport { useAuthState } from '../../../hooks/useAuthState';\n\nconst Content = () => {\n  const { user } = useAuthState();\n  return <p>I am so happy to have you here {user.username}.</p>;\n};\n\nexport default Content;\n","import React from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Content from './components/Content';\n\nconst AuthenticatedApp = () => (\n  <>\n    <Header />\n    <Content />\n    <Footer />\n  </>\n);\n\nexport default AuthenticatedApp;\n","import React from 'react';\n\nconst UnauthenticatedApp = () => (\n  <>\n    <p>Please login</p>\n    <p>You must login to read the message</p>\n  </>\n);\n\nexport default UnauthenticatedApp;\n","import React from 'react';\nimport { useAuthState } from '../hooks/useAuthState';\nimport AuthenticatedApp from './AuthenticatedApp';\nimport UnauthenticatedApp from './UnauthenticatedApp';\n\nconst App = () => {\n  const { user } = useAuthState();\n  return user ? <AuthenticatedApp /> : <UnauthenticatedApp />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AuthProvider } from './hooks/useAuthState';\n\nReactDOM.render(\n  <AuthProvider>\n    <App />\n  </AuthProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}